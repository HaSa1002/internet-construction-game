[gd_scene load_steps=25 format=2]

[ext_resource path="res://ui/ui.tscn" type="PackedScene" id=1]
[ext_resource path="res://maps/Map.gd" type="Script" id=2]
[ext_resource path="res://city/City.gd" type="Script" id=3]
[ext_resource path="res://city/router/xl.png" type="Texture" id=4]
[ext_resource path="res://city/router/xs.png" type="Texture" id=5]
[ext_resource path="res://city/city/xs.png" type="Texture" id=6]
[ext_resource path="res://city/city/xl.png" type="Texture" id=7]
[ext_resource path="res://city/city/s.png" type="Texture" id=8]
[ext_resource path="res://city/city/m.png" type="Texture" id=9]
[ext_resource path="res://city/router/s.png" type="Texture" id=10]
[ext_resource path="res://city/router/l.png" type="Texture" id=11]
[ext_resource path="res://city/router/m.png" type="Texture" id=12]
[ext_resource path="res://city/city/l.png" type="Texture" id=13]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float coverage;
uniform float est_coverage;
uniform bool is_router;

const float PI = 3.14159265358979323846;
const float TWO_PI = 6.28318530718;
const vec3 ring_color = vec3(0.0,1.0,0.0);
const vec3 router_color = vec3(0.9,1.0,0.9);



void fragment() {
	vec4 color = texture(TEXTURE, UV);
	if (color.rgb == ring_color) {
		// We are in the ring
		if (is_router) {
			color.rgb = router_color;
			color.a *= sin(TIME*2.0) / 8.0 + 0.875;
		} else {
			bool c_coverage = coverage * 2.0 - 1.0 > atan(UV.y - .5, UV.x - .5) / PI;
			bool c_est_coverage = est_coverage * 2.0 - 1.0 > atan(UV.y - .5, UV.x - .5) / PI;
			color.g = float(c_coverage || !c_est_coverage);
			color.b = float(!c_coverage);
			color.r = float(!c_est_coverage);
		}
	}
	
	
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/coverage = 0.0
shader_param/est_coverage = 0.0
shader_param/is_router = false

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 1 )
shader_param/coverage = 0.0
shader_param/est_coverage = 0.0
shader_param/is_router = true

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 1 )
shader_param/coverage = 0.0
shader_param/est_coverage = 0.0
shader_param/is_router = true

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 1 )
shader_param/coverage = 0.0
shader_param/est_coverage = 0.0
shader_param/is_router = false

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 1 )
shader_param/coverage = 0.0
shader_param/est_coverage = 0.0
shader_param/is_router = true

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 1 )
shader_param/coverage = 0.0
shader_param/est_coverage = 0.0
shader_param/is_router = false

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 1 )
shader_param/coverage = 0.0
shader_param/est_coverage = 0.0
shader_param/is_router = false

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 1 )
shader_param/coverage = 0.0
shader_param/est_coverage = 0.0
shader_param/is_router = true

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 1 )
shader_param/coverage = 0.0
shader_param/est_coverage = 0.0
shader_param/is_router = true

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 1 )
shader_param/coverage = 0.0
shader_param/est_coverage = 0.0
shader_param/is_router = false

[node name="Map" type="Node2D"]
script = ExtResource( 2 )
level = 10
level_name = "Devlevel 10"
description = "That is my Devlevel. It's doable and the level, where I do all the testing"
victory_weeks = 5

[node name="Cities" type="Node2D" parent="."]
show_behind_parent = true
__meta__ = {
"_edit_lock_": true
}

[node name="City" type="Sprite" parent="Cities"]
material = SubResource( 2 )
position = Vector2( 112.3, 128.3 )
texture = ExtResource( 6 )
script = ExtResource( 3 )

[node name="City2" type="Sprite" parent="Cities"]
material = SubResource( 3 )
position = Vector2( 112.3, 192.3 )
texture = ExtResource( 5 )
script = ExtResource( 3 )
coverage = 1.0
is_router = true

[node name="City3" type="Sprite" parent="Cities"]
material = SubResource( 4 )
position = Vector2( 352.3, 288.3 )
texture = ExtResource( 12 )
script = ExtResource( 3 )
inhabitants = 500
coverage = 1.0
is_router = true

[node name="City4" type="Sprite" parent="Cities"]
material = SubResource( 5 )
position = Vector2( 352.3, 144.3 )
texture = ExtResource( 9 )
script = ExtResource( 3 )
inhabitants = 500

[node name="City5" type="Sprite" parent="Cities"]
material = SubResource( 6 )
position = Vector2( 560.3, 352.3 )
texture = ExtResource( 11 )
script = ExtResource( 3 )
inhabitants = 800
coverage = 1.0
is_router = true

[node name="City6" type="Sprite" parent="Cities"]
material = SubResource( 7 )
position = Vector2( 224.3, 144.3 )
texture = ExtResource( 8 )
script = ExtResource( 3 )
inhabitants = 250

[node name="City7" type="Sprite" parent="Cities"]
material = SubResource( 8 )
position = Vector2( 816.3, 144.3 )
texture = ExtResource( 7 )
script = ExtResource( 3 )
inhabitants = 1000

[node name="City8" type="Sprite" parent="Cities"]
material = SubResource( 9 )
position = Vector2( 224.3, 240.3 )
texture = ExtResource( 10 )
script = ExtResource( 3 )
inhabitants = 250
coverage = 1.0
is_router = true

[node name="City10" type="Sprite" parent="Cities"]
material = SubResource( 10 )
position = Vector2( 816.3, 432.3 )
texture = ExtResource( 4 )
script = ExtResource( 3 )
inhabitants = 1000
coverage = 1.0
is_router = true

[node name="City11" type="Sprite" parent="Cities"]
material = SubResource( 11 )
position = Vector2( 560.3, 144.3 )
texture = ExtResource( 13 )
script = ExtResource( 3 )
inhabitants = 800

[node name="ui" parent="." instance=ExtResource( 1 )]
[connection signal="buttons_untoggled" from="ui" to="." method="_on_ui_buttons_untoggled"]
[connection signal="cable_size_btn_pressed" from="ui" to="." method="_on_ui_cable_size_btn_pressed"]
[connection signal="dismantle_pressed" from="ui" to="." method="_on_ui_dismantle_pressed"]
[connection signal="maintenance_changed" from="ui" to="." method="_on_ui_maintenance_changed"]
[connection signal="next_level_pressed" from="ui" to="." method="_on_ui_next_level_pressed"]
[connection signal="repair_pressed" from="ui" to="." method="_on_ui_repair_pressed"]
[connection signal="retry_pressed" from="ui" to="." method="_on_ui_retry_pressed"]
[connection signal="timer_pressed" from="ui" to="." method="_on_ui_timer_pressed"]
